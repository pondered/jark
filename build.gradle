import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "java"
    id "idea"
    id "project-report"
    id "java-library"
    id "checkstyle"
    id "org.springframework.boot" version "3.0.2" apply false
    id "io.spring.dependency-management" version "1.1.0"
    id "it.nicolasfarabegoli.conventional-commits" version "3.1.0"
}

group = "com.jark.template"

allprojects {
    apply plugin: "java-library"
    version = "0.0.1-SNAPSHOT"

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"

    sourceSets {
        main {
            java {
                srcDir "src/java"
            }
            resources {
                srcDir "src/resources"
            }
        }
    }
}

subprojects {
    apply plugin: "idea"
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "java-library"
    apply plugin: "project-report"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "it.nicolasfarabegoli.conventional-commits"

    dependencyManagement {
        // 导入maven依赖管理的bom
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$SPRING_BOOT_VERSION"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$SPRING_CLOUD_VERSION"
            mavenBom "com.tencent.cloud:spring-cloud-tencent-dependencies:${SPRING_CLOUD_TENCENT_VERSION}"
        }
    }

    dependencies {
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        implementation("org.mapstruct:mapstruct:${MAPSTRUCT_VERSION}")
        annotationProcessor("org.mapstruct:mapstruct-processor:${MAPSTRUCT_VERSION}")

        compileOnly("org.springframework.boot:spring-boot-configuration-processor")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")


        testAnnotationProcessor("org.projectlombok:lombok")
        testCompileOnly("org.projectlombok:lombok")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
        testImplementation "com.github.jsonzou:jmockdata:${JMOCKDATA_VERSION}"
        testImplementation "com.aventstack:extentreports:${EXTENT_REPORT_VERSION}"
        testImplementation("org.mockito:mockito-inline")
    }
    configurations.all {
        exclude group: "com.tencent.polaris", module: "connector-nacos"
        exclude group: "com.tencent.polaris", module: "connector-consul"
    }

    checkstyle {
        checkstyleTest.enabled = false
    }

    test {
        useJUnitPlatform()
    }
}

task installGitHooks() {
    def suffix = "macos"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        suffix = "windows"
    }

    copy {
        from new File(rootProject.rootDir, "config/git/pre-commit-$suffix")
        into { new File(rootProject.rootDir, ".git/hooks") }
        rename("pre-commit-$suffix", "pre-commit")
        fileMode 0775
    }

//    from new File(rootProject.rootDir, "config/git/pre-push-$suffix")
//    into { new File(rootProject.rootDir, ".git/hooks") }
//    rename("pre-push-$suffix", "pre-push")
//    delete ".git/hooks/pre-push"

}

tasks.every { installGitHooks }
